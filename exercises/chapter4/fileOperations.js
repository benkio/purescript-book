// Generated by purs bundle 0.13.6
var PS = {};
(function(exports) {
  "use strict";

  exports.arrayApply = function (fs) {
    return function (xs) {
      var l = fs.length;
      var k = xs.length;
      var result = new Array(l*k);
      var n = 0;
      for (var i = 0; i < l; i++) {
        var f = fs[i];
        for (var j = 0; j < k; j++) {
          result[n++] = f(xs[j]);
        }
      }
      return result;
    };
  };
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function(exports) {
  "use strict";

  exports.arrayMap = function (f) {
    return function (arr) {
      var l = arr.length;
      var result = new Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(arr[i]);
      }
      return result;
    };
  };
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Functor"] = $PS["Data.Functor"] || {};
  var exports = $PS["Data.Functor"];
  var $foreign = $PS["Data.Functor"];              
  var Functor = function (map) {
      this.map = map;
  };
  var map = function (dict) {
      return dict.map;
  };                                                                                             
  var functorArray = new Functor($foreign.arrayMap);
  exports["Functor"] = Functor;
  exports["map"] = map;
  exports["functorArray"] = functorArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Control.Apply"] = $PS["Control.Apply"] || {};
  var exports = $PS["Control.Apply"];
  var $foreign = $PS["Control.Apply"];
  var Data_Functor = $PS["Data.Functor"];                
  var Apply = function (Functor0, apply) {
      this.Functor0 = Functor0;
      this.apply = apply;
  }; 
  var applyArray = new Apply(function () {
      return Data_Functor.functorArray;
  }, $foreign.arrayApply);
  exports["Apply"] = Apply;
  exports["applyArray"] = applyArray;
})(PS);
(function(exports) {
  "use strict";

  exports.arrayBind = function (arr) {
    return function (f) {
      var result = [];
      for (var i = 0, l = arr.length; i < l; i++) {
        Array.prototype.push.apply(result, f(arr[i]));
      }
      return result;
    };
  };
})(PS["Control.Bind"] = PS["Control.Bind"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Control.Bind"] = $PS["Control.Bind"] || {};
  var exports = $PS["Control.Bind"];
  var $foreign = $PS["Control.Bind"];
  var Control_Apply = $PS["Control.Apply"];
  var Bind = function (Apply0, bind) {
      this.Apply0 = Apply0;
      this.bind = bind;
  }; 
  var bindArray = new Bind(function () {
      return Control_Apply.applyArray;
  }, $foreign.arrayBind);
  var bind = function (dict) {
      return dict.bind;
  };
  exports["Bind"] = Bind;
  exports["bind"] = bind;
  exports["bindArray"] = bindArray;
})(PS);
(function(exports) {
  "use strict";

  //------------------------------------------------------------------------------
  // Extending arrays ------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.cons = function (e) {
    return function (l) {
      return [e].concat(l);
    };
  };
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Function"] = $PS["Data.Function"] || {};
  var exports = $PS["Data.Function"];
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  };
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  exports["flip"] = flip;
  exports["const"] = $$const;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Array"] = $PS["Data.Array"] || {};
  var exports = $PS["Data.Array"];
  var $foreign = $PS["Data.Array"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Function = $PS["Data.Function"];
  var concatMap = Data_Function.flip(Control_Bind.bind(Control_Bind.bindArray));
  exports["concatMap"] = concatMap;
  exports["cons"] = $foreign.cons;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Boolean"] = $PS["Data.Boolean"] || {};
  var exports = $PS["Data.Boolean"];
  var otherwise = true;
  exports["otherwise"] = otherwise;
})(PS);
(function(exports) {
  "use strict";

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Monoid"] = $PS["Data.Monoid"] || {};
  var exports = $PS["Data.Monoid"];
  var mempty = function (dict) {
      return dict.mempty;
  };
  exports["mempty"] = mempty;
})(PS);
(function(exports) {
  "use strict";

  exports.concatArray = function (xs) {
    return function (ys) {
      if (xs.length === 0) return ys;
      if (ys.length === 0) return xs;
      return xs.concat(ys);
    };
  };
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Semigroup"] = $PS["Data.Semigroup"] || {};
  var exports = $PS["Data.Semigroup"];
  var $foreign = $PS["Data.Semigroup"];
  var Semigroup = function (append) {
      this.append = append;
  }; 
  var semigroupArray = new Semigroup($foreign.concatArray);
  var append = function (dict) {
      return dict.append;
  };
  exports["append"] = append;
  exports["semigroupArray"] = semigroupArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Foldable"] = $PS["Data.Foldable"] || {};
  var exports = $PS["Data.Foldable"];
  var $foreign = $PS["Data.Foldable"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];      
  var Foldable = function (foldMap, foldl, foldr) {
      this.foldMap = foldMap;
      this.foldl = foldl;
      this.foldr = foldr;
  };
  var foldr = function (dict) {
      return dict.foldr;
  }; 
  var foldMapDefaultR = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return foldr(dictFoldable)(function (x) {
                  return function (acc) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(f(x))(acc);
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      };
  };
  var foldableArray = new Foldable(function (dictMonoid) {
      return foldMapDefaultR(foldableArray)(dictMonoid);
  }, $foreign.foldlArray, $foreign.foldrArray);
  exports["foldr"] = foldr;
  exports["foldableArray"] = foldableArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Maybe"] = $PS["Data.Maybe"] || {};
  var exports = $PS["Data.Maybe"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];          
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  var maybe = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Nothing) {
                  return v;
              };
              if (v2 instanceof Just) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe (line 217, column 1 - line 217, column 51): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };                                                         
  var isJust = maybe(false)(Data_Function["const"](true));
  var functorMaybe = new Data_Functor.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Just) {
              return new Just(v(v1.value0));
          };
          return Nothing.value;
      };
  });
  var applyMaybe = new Control_Apply.Apply(function () {
      return functorMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return Data_Functor.map(functorMaybe)(v.value0)(v1);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe (line 67, column 1 - line 69, column 30): " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var bindMaybe = new Control_Bind.Bind(function () {
      return applyMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return v1(v.value0);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe (line 125, column 1 - line 127, column 28): " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
  exports["isJust"] = isJust;
  exports["bindMaybe"] = bindMaybe;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Path"] = $PS["Data.Path"] || {};
  var exports = $PS["Data.Path"];
  var Data_Maybe = $PS["Data.Maybe"];              
  var Directory = (function () {
      function Directory(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Directory.create = function (value0) {
          return function (value1) {
              return new Directory(value0, value1);
          };
      };
      return Directory;
  })();
  var File = (function () {
      function File(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      File.create = function (value0) {
          return function (value1) {
              return new File(value0, value1);
          };
      };
      return File;
  })();
  var size = function (v) {
      if (v instanceof File) {
          return new Data_Maybe.Just(v.value1);
      };
      return Data_Maybe.Nothing.value;
  };
  var root = new Directory("/", [ new Directory("/bin/", [ new File("/bin/cp", 24800), new File("/bin/ls", 34700), new File("/bin/mv", 20200) ]), new Directory("/etc/", [ new File("/etc/hosts", 300) ]), new Directory("/home/", [ new Directory("/home/user/", [ new File("/home/user/todo.txt", 1020), new Directory("/home/user/code/", [ new Directory("/home/user/code/js/", [ new File("/home/user/code/js/test.js", 40000) ]), new Directory("/home/user/code/haskell/", [ new File("/home/user/code/haskell/test.hs", 5000) ]) ]) ]) ]) ]);
  var ls = function (v) {
      if (v instanceof Directory) {
          return v.value1;
      };
      return [  ];
  };
  var isDirectory = function (v) {
      if (v instanceof Directory) {
          return true;
      };
      return false;
  };
  var filename = function (v) {
      if (v instanceof File) {
          return v.value0;
      };
      if (v instanceof Directory) {
          return v.value0;
      };
      throw new Error("Failed pattern match at Data.Path (line 47, column 1 - line 47, column 27): " + [ v.constructor.name ]);
  };
  exports["root"] = root;
  exports["ls"] = ls;
  exports["filename"] = filename;
  exports["isDirectory"] = isDirectory;
  exports["size"] = size;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["FileOperations"] = $PS["FileOperations"] || {};
  var exports = $PS["FileOperations"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Array = $PS["Data.Array"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Path = $PS["Data.Path"];
  var Data_Semigroup = $PS["Data.Semigroup"];                
  var whereIs$prime = function (searchTerm) {
      return function (p) {
          return function (parent) {
              if (Data_Path.isDirectory(p) === false && searchTerm === Data_Path.filename(p)) {
                  return parent;
              };
              if (Data_Path.isDirectory(p) === false && searchTerm !== Data_Path.filename(p)) {
                  return Data_Maybe.Nothing.value;
              };
              if (Data_Boolean.otherwise) {
                  var matchFile = function (p$prime) {
                      return function (m) {
                          var $4 = Data_Maybe.isJust(m);
                          if ($4) {
                              return m;
                          };
                          return whereIs$prime(searchTerm)(p$prime)(new Data_Maybe.Just(p));
                      };
                  };
                  return Data_Foldable.foldr(Data_Foldable.foldableArray)(matchFile)(Data_Maybe.Nothing.value)(Data_Path.ls(p));
              };
              throw new Error("Failed pattern match at FileOperations (line 35, column 1 - line 35, column 55): " + [ searchTerm.constructor.name, p.constructor.name, parent.constructor.name ]);
          };
      };
  };
  var whereIs = function (searchTerm) {
      return whereIs$prime(searchTerm)(Data_Path.root)(Data_Maybe.Nothing.value);
  };
  var onlyFiles = function (p) {
      return Data_Foldable.foldr(Data_Foldable.foldableArray)(function (p1) {
          return function (p2) {
              var $5 = Data_Path.isDirectory(p1);
              if ($5) {
                  return Data_Semigroup.append(Data_Semigroup.semigroupArray)(onlyFiles(p1))(p2);
              };
              return Data_Array.cons(p1)(p2);
          };
      })([  ])(Data_Path.ls(p));
  };
  var largestFile = function (p) {
      var selectLargerFile = function (f) {
          return function (v) {
              if (v instanceof Data_Maybe.Nothing) {
                  return new Data_Maybe.Just(f);
              };
              if (v instanceof Data_Maybe.Just) {
                  return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Path.size(v.value0))(function (actualFSize) {
                      return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Path.size(f))(function (currentFSize) {
                          var $8 = actualFSize >= currentFSize;
                          if ($8) {
                              return v;
                          };
                          return new Data_Maybe.Just(f);
                      });
                  });
              };
              throw new Error("Failed pattern match at FileOperations (line 24, column 15 - line 24, column 50): " + [ f.constructor.name, v.constructor.name ]);
          };
      };
      return Data_Foldable.foldr(Data_Foldable.foldableArray)(selectLargerFile)(Data_Maybe.Nothing.value)(onlyFiles(p));
  };
  var allFiles$prime = function (file) {
      return Data_Array.cons(file)(Control_Bind.bind(Control_Bind.bindArray)(Data_Path.ls(file))(function (child) {
          return allFiles$prime(child);
      }));
  };
  var allFiles = function (root) {
      return Data_Array.cons(root)(Data_Array.concatMap(allFiles)(Data_Path.ls(root)));
  };
  exports["allFiles"] = allFiles;
  exports["allFiles'"] = allFiles$prime;
  exports["onlyFiles"] = onlyFiles;
  exports["largestFile"] = largestFile;
  exports["whereIs"] = whereIs;
  exports["whereIs'"] = whereIs$prime;
})(PS);
module.exports = PS["FileOperations"];
